# ------------------------------------------------------------------------------
#
#   Copyright 2023
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol ``."""

import os
from typing import Any

from aea.skills.behaviours import FSMBehaviour

from packages.lstolas.skills.lst_skill.behaviours_classes.error_rounds import HandledErrorRound, UnHandledErrorRound
from packages.lstolas.skills.lst_skill.behaviours_classes.redeem_round import RedeemRound
from packages.lstolas.skills.lst_skill.behaviours_classes.waiting_round import WaitingRound
from packages.lstolas.skills.lst_skill.behaviours_classes.base_behaviour import (
    LstabciappEvents,
    LstabciappStates,
)
from packages.lstolas.skills.lst_skill.behaviours_classes.starting_round import StartRound
from packages.lstolas.skills.lst_skill.behaviours_classes.checkpoint_round import CheckpointRound
from packages.lstolas.skills.lst_skill.behaviours_classes.check_any_work_round import CheckAnyWorkRound
from packages.lstolas.skills.lst_skill.behaviours_classes.trigger_l2_to_l1_bridge import TriggerL2ToL1BridgeRound
from packages.lstolas.skills.lst_skill.behaviours_classes.claim_reward_tokens_round import ClaimRewardTokensRound
from packages.lstolas.skills.lst_skill.behaviours_classes.claim_bridged_tokens_round import (
    ClaimBridgedTokensRound,
)
from packages.lstolas.skills.lst_skill.behaviours_classes.finalize_bridged_tokens_round import (
    FinalizeBridgedTokensRound,
)


# Define states


class LstabciappFsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    rounds = [
        CheckAnyWorkRound,
        StartRound,
        UnHandledErrorRound,
        WaitingRound,
        FinalizeBridgedTokensRound,
        ClaimBridgedTokensRound,
        HandledErrorRound,
        RedeemRound,
        TriggerL2ToL1BridgeRound,
        CheckpointRound,
        ClaimRewardTokensRound,
    ]

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state(LstabciappStates.STARTROUND.value, StartRound(**kwargs), True)

        self.register_state(LstabciappStates.UNHANDLEDERRORROUND.value, UnHandledErrorRound(**kwargs))

        self.register_state(LstabciappStates.CHECKANYWORKROUND.value, CheckAnyWorkRound(**kwargs))
        self.register_state(LstabciappStates.WAITINGROUND.value, WaitingRound(**kwargs))
        self.register_state(LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value, FinalizeBridgedTokensRound(**kwargs))
        self.register_state(LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value, ClaimBridgedTokensRound(**kwargs))
        self.register_state(LstabciappStates.HANDLEDERRORROUND.value, HandledErrorRound(**kwargs))
        self.register_state(LstabciappStates.REDEEMROUND.value, RedeemRound(**kwargs))
        self.register_state(LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value, TriggerL2ToL1BridgeRound(**kwargs))
        self.register_state(LstabciappStates.CHECKPOINTROUND.value, CheckpointRound(**kwargs))
        self.register_state(LstabciappStates.CLAIMREWARDTOKENSROUND.value, ClaimRewardTokensRound(**kwargs))

        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.CALL_CHECKPOINTS,
            destination=LstabciappStates.CHECKPOINTROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.CALL_REDEEM,
            destination=LstabciappStates.REDEEMROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.CLAIM_BRIDGED_TOKEN,
            destination=LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.CLAIM_REWARDS,
            destination=LstabciappStates.CLAIMREWARDTOKENSROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.FINALIZE_BRIDGED_TOKEN,
            destination=LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.NO_WORK,
            destination=LstabciappStates.WAITINGROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.TRIGGER_L2_TO_L1,
            destination=LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKPOINTROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKPOINTROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKPOINTROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMREWARDTOKENSROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMREWARDTOKENSROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMREWARDTOKENSROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.HANDLEDERRORROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.REDEEMROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.REDEEMROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.REDEEMROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.STARTROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.WAITINGROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )

    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up Lstabciapp FSM behaviour.")
        for state in self._name_to_state.values():
            state.setup()

    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down Lstabciapp FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        os._exit(0)
