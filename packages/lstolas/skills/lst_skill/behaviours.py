# ------------------------------------------------------------------------------
#
#   Copyright 2023
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol ``."""

import os
from abc import ABC
from enum import Enum
from random import choice
from typing import Any

from aea.skills.behaviours import State, FSMBehaviour


class LstabciappEvents(Enum):
    """Events for the fsm."""

    TRIGGER_L2_TO_L1 = "TRIGGER_L2_TO_L1"
    CLAIM_REWARDS = "CLAIM_REWARDS"
    FATAL_ERROR = "FATAL_ERROR"
    FINALIZE_BRIDGED_TOKEN = "FINALIZE_BRIDGED_TOKEN"
    DONE = "DONE"
    CALL_REDEEM = "CALL_REDEEM"
    CALL_CHECKPOINTS = "CALL_CHECKPOINTS"
    CLAIM_BRIDGED_TOKEN = "CLAIM_BRIDGED_TOKEN"
    NO_WORK = "NO_WORK"
    ERROR = "ERROR"


class LstabciappStates(Enum):
    """States for the fsm."""

    CHECKANYWORKROUND = "checkanyworkround"
    STARTROUND = "startround"
    UNHANDLEDERRORROUND = "unhandlederrorround"
    WAITINGROUND = "waitinground"
    FINALIZEBRIDGEDTOKENSROUND = "finalizebridgedtokensround"
    CLAIMBRIDGEDTOKENSROUND = "claimbridgedtokensround"
    HANDLEDERRORROUND = "handlederrorround"
    REDEEMROUND = "redeemround"
    TRIGGERL2TOL1BRIDGEROUND = "triggerl2tol1bridgeround"
    CHECKPOINTROUND = "checkpointround"
    CLAIMREWARDTOKENSROUND = "claimrewardtokensround"


class BaseState(State, ABC):
    """Base class for states."""

    _state: LstabciappStates = None

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._event = None
        self._is_done = False  # Initially, the state is not done

    def is_done(self) -> bool:
        """Is done."""
        return self._is_done

    @property
    def event(self) -> str | None:
        """Current event."""
        return self._event

    @property
    def log(self):
        """Get the logger from the context."""
        return self.context.logger


# Define states


class CheckAnyWorkRound(BaseState):
    """This class implements the behaviour of the state CheckAnyWorkRound."""

    _state = LstabciappStates.CHECKANYWORKROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Checking for any work to be done...")
        self._is_done = True
        self._event = choice(  # noqa: S311
            [
                LstabciappEvents.NO_WORK,
                LstabciappEvents.FINALIZE_BRIDGED_TOKEN,
                LstabciappEvents.CLAIM_BRIDGED_TOKEN,
                LstabciappEvents.CLAIM_REWARDS,
                LstabciappEvents.TRIGGER_L2_TO_L1,
                LstabciappEvents.CALL_REDEEM,
                LstabciappEvents.CALL_CHECKPOINTS,
            ]
        )


class StartRound(BaseState):
    """This class implements the behaviour of the state StartRound."""

    _state = LstabciappStates.STARTROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Starting the round...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class UnHandledErrorRound(BaseState):
    """This class implements the behaviour of the state UnHandledErrorRound."""

    _state = LstabciappStates.UNHANDLEDERRORROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Handling unhandled error...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class WaitingRound(BaseState):
    """This class implements the behaviour of the state WaitingRound."""

    _state = LstabciappStates.WAITINGROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("No work to be done. Waiting...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class FinalizeBridgedTokensRound(BaseState):
    """This class implements the behaviour of the state FinalizeBridgedTokensRound."""

    _state = LstabciappStates.FINALIZEBRIDGEDTOKENSROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Finalizing bridged tokens...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class ClaimBridgedTokensRound(BaseState):
    """This class implements the behaviour of the state ClaimBridgedTokensRound."""

    _state = LstabciappStates.CLAIMBRIDGEDTOKENSROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Claiming bridged tokens...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class HandledErrorRound(BaseState):
    """This class implements the behaviour of the state HandledErrorRound."""

    _state = LstabciappStates.HANDLEDERRORROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Handling error...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class RedeemRound(BaseState):
    """This class implements the behaviour of the state RedeemRound."""

    _state = LstabciappStates.REDEEMROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Redeeming tokens...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class TriggerL2ToL1BridgeRound(BaseState):
    """This class implements the behaviour of the state TriggerL2ToL1BridgeRound."""

    _state = LstabciappStates.TRIGGERL2TOL1BRIDGEROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Triggering L2 to L1 bridge...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class CheckpointRound(BaseState):
    """This class implements the behaviour of the state CheckpointRound."""

    _state = LstabciappStates.CHECKPOINTROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Creating checkpoint...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class ClaimRewardTokensRound(BaseState):
    """This class implements the behaviour of the state ClaimRewardTokensRound."""

    _state = LstabciappStates.CLAIMREWARDTOKENSROUND

    def act(self) -> None:
        """Perform the act."""
        self.log.info("Claiming reward tokens...")
        self._is_done = True
        self._event = LstabciappEvents.DONE


class LstabciappFsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    rounds = [
        CheckAnyWorkRound,
        StartRound,
        UnHandledErrorRound,
        WaitingRound,
        FinalizeBridgedTokensRound,
        ClaimBridgedTokensRound,
        HandledErrorRound,
        RedeemRound,
        TriggerL2ToL1BridgeRound,
        CheckpointRound,
        ClaimRewardTokensRound,
    ]

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state(LstabciappStates.STARTROUND.value, StartRound(**kwargs), True)

        self.register_state(LstabciappStates.UNHANDLEDERRORROUND.value, UnHandledErrorRound(**kwargs))

        self.register_state(LstabciappStates.CHECKANYWORKROUND.value, CheckAnyWorkRound(**kwargs))
        self.register_state(LstabciappStates.WAITINGROUND.value, WaitingRound(**kwargs))
        self.register_state(LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value, FinalizeBridgedTokensRound(**kwargs))
        self.register_state(LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value, ClaimBridgedTokensRound(**kwargs))
        self.register_state(LstabciappStates.HANDLEDERRORROUND.value, HandledErrorRound(**kwargs))
        self.register_state(LstabciappStates.REDEEMROUND.value, RedeemRound(**kwargs))
        self.register_state(LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value, TriggerL2ToL1BridgeRound(**kwargs))
        self.register_state(LstabciappStates.CHECKPOINTROUND.value, CheckpointRound(**kwargs))
        self.register_state(LstabciappStates.CLAIMREWARDTOKENSROUND.value, ClaimRewardTokensRound(**kwargs))

        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.CALL_CHECKPOINTS,
            destination=LstabciappStates.CHECKPOINTROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.CALL_REDEEM,
            destination=LstabciappStates.REDEEMROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.CLAIM_BRIDGED_TOKEN,
            destination=LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.CLAIM_REWARDS,
            destination=LstabciappStates.CLAIMREWARDTOKENSROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.FINALIZE_BRIDGED_TOKEN,
            destination=LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.NO_WORK,
            destination=LstabciappStates.WAITINGROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKANYWORKROUND.value,
            event=LstabciappEvents.TRIGGER_L2_TO_L1,
            destination=LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKPOINTROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKPOINTROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CHECKPOINTROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMREWARDTOKENSROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMREWARDTOKENSROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.CLAIMREWARDTOKENSROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.FINALIZEBRIDGEDTOKENSROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.HANDLEDERRORROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.REDEEMROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.REDEEMROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.REDEEMROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.STARTROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value,
            event=LstabciappEvents.ERROR,
            destination=LstabciappStates.HANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.TRIGGERL2TOL1BRIDGEROUND.value,
            event=LstabciappEvents.FATAL_ERROR,
            destination=LstabciappStates.UNHANDLEDERRORROUND.value,
        )
        self.register_transition(
            source=LstabciappStates.WAITINGROUND.value,
            event=LstabciappEvents.DONE,
            destination=LstabciappStates.CHECKANYWORKROUND.value,
        )

    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up Lstabciapp FSM behaviour.")

    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down Lstabciapp FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        os._exit(0)
